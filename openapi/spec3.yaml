openapi: "3.0.0"

info:
  title: eInnsyn REST API
  version: "3.0"

servers:
  - url: https://api.einnsyn.no/

tags:
  - name: Arkiv
  - name: Arkivdel
  - name: Bruker
  - name: Dokumentbeskrivelse
  - name: Dokumentobjekt
  - name: Enhet
  - name: Innsynskrav
  - name: InnsynskravDel
  - name: Journalpost
  - name: Klasse
  - name: Korrespondansepart
  - name: Moetemappe
  - name: Saksmappe
  - name: Skjerming

paths:
  /arkiv:
    get:
      description: Get a Arkiv list.
      tags:
        - Arkiv
      operationId: GetArkivList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arkiv"
    post:
      description: Create a Arkiv.
      tags:
        - Arkiv
      operationId: PostArkiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arkiv"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkiv"

  /arkiv/{arkivId}:
    get:
      description: Get a single Arkiv.
      tags:
        - Arkiv
      operationId: GetArkiv
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkiv"
    put:
      description: Update a single Arkiv.
      tags:
        - Arkiv
      operationId: PutArkiv
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arkiv"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkiv"
    delete:
      description: Delete a single Arkiv.
      tags:
        - Arkiv
      operationId: DeleteArkiv
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkiv"

  /arkiv/{arkivId}/arkivdel:
    get:
      description: Get a Arkivdel list.
      tags:
        - Arkivdel
      operationId: GetArkivArkivdelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
        - name: arkivId
          in: query
          description: Filter by Arkiv
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arkivdel"
    post:
      description: Create a Arkivdel.
      tags:
        - Arkivdel
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      operationId: PostArkivArkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arkivdel"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkivdel"

  /arkiv/{arkivId}/arkiv:
    get:
      description: Get a Arkiv list.
      tags:
        - Arkiv
      operationId: GetArkivArkivList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
        - name: arkivId
          in: query
          description: Filter by Arkiv
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arkiv"
    post:
      description: Create a Arkiv.
      tags:
        - Arkiv
      operationId: PostArkivArkiv
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arkiv"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkiv"

  /arkiv/{arkivId}/saksmappe:
    get:
      description: Get a Saksmappe list.
      tags:
        - Saksmappe
      operationId: GetArkivSaksmappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
        - name: arkivId
          in: query
          description: Filter by Arkiv
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Saksmappe"
    post:
      description: Create a Saksmappe.
      tags:
        - Saksmappe
      operationId: PostArkivSaksmappe
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Saksmappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"

  /arkiv/{arkivId}/moetemappe:
    get:
      description: Get a Moetemappe list.
      tags:
        - Moetemappe
      operationId: GetArkivMoetemappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
        - name: arkivId
          in: query
          description: Filter by Arkiv
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetemappe"
    post:
      description: Create a Moetemappe.
      tags:
        - Moetemappe
      operationId: PostArkivMoetemappe
      parameters:
        - name: arkivId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkiv
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetemappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"

  /arkivdel:
    get:
      description: Get an Arkivdel list.
      tags:
        - Arkivdel
      operationId: GetArkivdelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arkivdel"

  /arkivdel/{arkivdelId}:
    get:
      description: Get a single Arkivdel.
      tags:
        - Arkivdel
      operationId: GetArkivdel
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkivdel"
    put:
      description: Update a single Arkivdel.
      tags:
        - Arkivdel
      operationId: PutArkivdel
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arkivdel"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkivdel"
    delete:
      description: Delete a single Arkivdel.
      tags:
        - Arkivdel
      operationId: DeleteArkivdel
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arkivdel"

  /arkivdel/{arkivdelId}/klasse:
    get:
      description: Get a Klasse list.
      tags:
        - Klasse
      operationId: GetArkivdelKlasseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
        - name: arkivdelId
          in: query
          description: Filter by Arkivdel
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klasse"
    post:
      description: Create a Klasse.
      tags:
        - Klasse
      operationId: PostArkivdelKlasse
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klasse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"

  /arkivdel/{arkivdelId}/klassifikasjonssystem:
    get:
      description: Get a Klassifikasjonssystem list.
      tags:
        - Klassifikasjonssystem
      operationId: GetArkivdelKlassifikasjonssystemList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
        - name: arkivdelId
          in: query
          description: Filter by Arkivdel
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klassifikasjonssystem"
    post:
      description: Create a Klassifikasjonssystem.
      tags:
        - Klassifikasjonssystem
      operationId: PostArkivdelKlassifikasjonssystem
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klassifikasjonssystem"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klassifikasjonssystem"

  /arkivdel/{arkivdelId}/saksmappe:
    get:
      description: Get a Saksmappe list.
      tags:
        - Saksmappe
      operationId: GetArkivdelSaksmappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
        - name: arkivdelId
          in: query
          description: Filter by Arkivdel
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Saksmappe"
    post:
      description: Create a Saksmappe.
      tags:
        - Saksmappe
      operationId: PostArkivdelSaksmappe
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Saksmappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"

  /arkivdel/{arkivdelId}/moetemappe:
    get:
      description: Get a Moetemappe list.
      tags:
        - Moetemappe
      operationId: GetArkivdelMoetemappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
        - name: arkivdelId
          in: query
          description: Filter by Arkivdel
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetemappe"
    post:
      description: Create a Moetemappe.
      tags:
        - Moetemappe
      operationId: PostArkivdelMoetemappe
      parameters:
        - name: arkivdelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Arkivdel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetemappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"

  /behandlingsprotokoll:
    get:
      description: Get a Behandlingsprotokoll list.
      tags:
        - Behandlingsprotokoll
      operationId: GetBehandlingsprotokollList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Behandlingsprotokoll"

  /behandlingsprotokoll/{behandlingsprotokollId}:
    get:
      description: Get a single Behandlingsprotokoll.
      tags:
        - Behandlingsprotokoll
      operationId: GetBehandlingsprotokoll
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: behandlingsprotokollId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Behandlingsprotokoll
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Behandlingsprotokoll"
    put:
      description: Update a single Behandlingsprotokoll.
      tags:
        - Behandlingsprotokoll
      operationId: PutBehandlingsprotokoll
      parameters:
        - name: behandlingsprotokollId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Behandlingsprotokoll
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Behandlingsprotokoll"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Behandlingsprotokoll"
    delete:
      description: Delete a single Behandlingsprotokoll.
      tags:
        - Behandlingsprotokoll
      operationId: DeleteBehandlingsprotokoll
      parameters:
        - name: behandlingsprotokollId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Behandlingsprotokoll
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Behandlingsprotokoll"

  /dokumentobjekt:
    get:
      description: Get a Dokumentobjekt list.
      tags:
        - Dokumentobjekt
      operationId: GetDokumentobjektList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentobjekt"

  /dokumentobjekt/{dokumentobjektId}:
    get:
      description: Get a single Dokumentobjekt.
      tags:
        - Dokumentobjekt
      operationId: GetDokumentobjekt
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: dokumentobjektId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentobjekt
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentobjekt"
    put:
      description: Update a single Dokumentobjekt.
      tags:
        - Dokumentobjekt
      operationId: PutDokumentobjekt
      parameters:
        - name: dokumentobjektId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentobjekt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dokumentobjekt"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentobjekt"
    delete:
      description: Delete a single Dokumentobjekt.
      tags:
        - Dokumentobjekt
      operationId: DeleteDokumentobjekt
      parameters:
        - name: dokumentobjektId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentobjekt
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentobjekt"

  /identifikator:
    get:
      description: Get a Identifikator list.
      tags:
        - Identifikator
      operationId: GetIdentifikatorList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Identifikator"

  /identifikator/{identifikatorId}:
    get:
      description: Get a single Identifikator.
      tags:
        - Identifikator
      operationId: GetIdentifikator
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: identifikatorId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Identifikator
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Identifikator"
    put:
      description: Update a single Identifikator.
      tags:
        - Identifikator
      operationId: PutIdentifikator
      parameters:
        - name: identifikatorId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Identifikator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Identifikator"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Identifikator"
    delete:
      description: Delete a single Identifikator.
      tags:
        - Identifikator
      operationId: DeleteIdentifikator
      parameters:
        - name: identifikatorId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Identifikator
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Identifikator"

  /innsynskrav:
    get:
      description: Get a Innsynskrav list.
      tags:
        - Innsynskrav
      operationId: GetInnsynskravList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Innsynskrav"
    post:
      description: Create a Innsynskrav.
      tags:
        - Innsynskrav
      operationId: PostInnsynskrav
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Innsynskrav"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Innsynskrav"

  /innsynskrav/{innsynskravId}:
    get:
      description: Get a Innsynskrav.
      tags:
        - Innsynskrav
      operationId: GetInnsynskrav
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: innsynskravId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Innsynskrav
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Innsynskrav"
    put:
      description: Update a Innsynskrav.
      tags:
        - Innsynskrav
      operationId: PutInnsynskrav
      parameters:
        - name: innsynskravId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Innsynskrav
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Innsynskrav"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Innsynskrav"
    delete:
      description: Delete a request.
      tags:
        - Innsynskrav
      operationId: DeleteInnsynskrav
      parameters:
        - name: innsynskravId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Innsynskrav
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Innsynskrav"

  /innsynskrav/{innsynskravId}/innsynskravDel:
    get:
      description: Get a InnsynskravDel list.
      tags:
        - InnsynskravDel
      operationId: GetInnsynskravInnsynskravDelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: innsynskravId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Innsynskrav
        - name: innsynskravId
          in: query
          description: Filter by Innsynskrav
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/InnsynskravDel"

  /innsynskrav/{innsynskravId}/verify/{secret}:
    put:
      description: Verify a Innsynskrav.
      tags:
        - Innsynskrav
      operationId: VerifyInnsynskrav
      parameters:
        - name: innsynskravId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Innsynskrav
        - name: secret
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Innsynskrav"

  /innsynskravDel:
    get:
      description: Get a InnsynskravDel list.
      tags:
        - InnsynskravDel
      operationId: GetInnsynskravDelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/InnsynskravDel"

  /innsynskravDel/{innsynskravDelId}:
    get:
      description: Get a single InnsynskravDel.
      tags:
        - InnsynskravDel
      operationId: GetInnsynskravDel
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: innsynskravDelId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: InnsynskravDel
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InnsynskravDel"

  /klasse:
    get:
      description: Get a Klasse list.
      tags:
        - Klasse
      operationId: GetKlasseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klasse"

  /klasse/{klasseId}:
    get:
      description: Get a single Klasse.
      tags:
        - Klasse
      operationId: GetKlasse
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"
    put:
      description: Update a single Klasse.
      tags:
        - Klasse
      operationId: PutKlasse
      parameters:
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klasse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"
    delete:
      description: Delete a single Klasse.
      tags:
        - Klasse
      operationId: DeleteKlasse
      parameters:
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"

  /klasse/{klasseId}/klasse:
    get:
      description: Get a Klasse list.
      tags:
        - Klasse
      operationId: GetKlasseKlasseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
        - name: klasseId
          in: query
          description: Filter by Klasse
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klasse"
    post:
      description: Create a Klasse.
      tags:
        - Klasse
      operationId: PostKlasseKlasse
      parameters:
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klasse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"

  /klasse/{klasseId}/saksmappe:
    get:
      description: Get a Saksmappe list.
      tags:
        - Saksmappe
      operationId: GetKlasseSaksmappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
        - name: klasseId
          in: query
          description: Filter by Klasse
          schema:
            type: string

      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Saksmappe"
    post:
      description: Create a Saksmappe.
      tags:
        - Saksmappe
      operationId: PostKlasseSaksmappe
      parameters:
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Saksmappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"

  /klasse/{klasseId}/moetemappe:
    get:
      description: Get a Moetemappe list.
      tags:
        - Moetemappe
      operationId: GetKlasseMoetemappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
        - name: klasseId
          in: query
          description: Filter by Klasse
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetemappe"
    post:
      description: Create a Moetemappe.
      tags:
        - Moetemappe
      operationId: PostKlasseMoetemappe
      parameters:
        - name: klasseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klasse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetemappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"

  /klassifikasjonssystem:
    get:
      description: Get a Klassifikasjonssystem list.
      tags:
        - Klassifikasjonssystem
      operationId: GetKlassifikasjonssystemList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klassifikasjonssystem"

  /klassifikasjonssystem/{klassifikasjonssystemId}:
    get:
      description: Get a single Klassifikasjonssystem.
      tags:
        - Klassifikasjonssystem
      operationId: GetKlassifikasjonssystem
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: klassifikasjonssystemId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klassifikasjonssystem
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klassifikasjonssystem"
    put:
      description: Update a single Klassifikasjonssystem.
      tags:
        - Klassifikasjonssystem
      operationId: PutKlassifikasjonssystem
      parameters:
        - name: klassifikasjonssystemId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klassifikasjonssystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klassifikasjonssystem"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klassifikasjonssystem"
    delete:
      description: Delete a single Klassifikasjonssystem.
      tags:
        - Klassifikasjonssystem
      operationId: DeleteKlassifikasjonssystem
      parameters:
        - name: klassifikasjonssystemId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klassifikasjonssystem
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klassifikasjonssystem"

  /klassifikasjonssystem/{klassifikasjonssystemId}/klasse:
    get:
      description: Get a Klasse list.
      tags:
        - Klasse
      operationId: GetKlassifikasjonssystemKlasseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: klassifikasjonssystemId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klassifikasjonssystem
        - name: klassifikasjonssystemId
          in: query
          description: Filter by Klassifikasjonssystem
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Klasse"
    post:
      description: Create a Klasse.
      tags:
        - Klasse
      operationId: PostKlassifikasjonssystemKlasse
      parameters:
        - name: klassifikasjonssystemId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Klassifikasjonssystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Klasse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Klasse"

  /korrespondansepart:
    get:
      description: Get a Korrespondansepart list.
      tags:
        - Korrespondansepart
      operationId: GetKorrespondansepartList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Korrespondansepart"

  /korrespondansepart/{korrespondansepartId}:
    get:
      description: Get a single Korrespondansepart.
      tags:
        - Korrespondansepart
      operationId: GetKorrespondansepart
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: korrespondansepartId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Korrespondansepart
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Korrespondansepart"
    put:
      description: Update a single Korrespondansepart.
      tags:
        - Korrespondansepart
      operationId: PutKorrespondansepart
      parameters:
        - name: korrespondansepartId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Korrespondansepart
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Korrespondansepart"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Korrespondansepart"
    delete:
      description: Delete a single Korrespondansepart.
      tags:
        - Korrespondansepart
      operationId: DeleteKorrespondansepart
      parameters:
        - name: korrespondansepartId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Korrespondansepart
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Korrespondansepart"

  /lagretSak:
    get:
      description: Get a LagretSak list.
      tags:
        - LagretSak
      operationId: GetLagretSakList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
        - name: brukerId
          in: query
          description: Filter by BrukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LagretSak"

  /lagretSak/{lagretSakId}:
    get:
      description: Get a single LagretSak.
      tags:
        - LagretSak
      operationId: GetLagretSak
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: lagretSakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSak"
    put:
      description: Update a single LagretSak.
      tags:
        - LagretSak
      operationId: PutLagretSak
      parameters:
        - name: lagretSakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSak
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LagretSak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSak"
    delete:
      description: Delete a single LagretSak.
      tags:
        - LagretSak
      operationId: DeleteLagretSak
      parameters:
        - name: lagretSakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSak"

  /lagretSoek:
    get:
      description: Get a LagretSoek list.
      tags:
        - LagretSoek
      operationId: GetLagretSoekList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
        - name: brukerId
          in: query
          description: Filter by BrukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LagretSoek"

  /lagretSoek/{lagretSoekId}:
    get:
      description: Get a single LagretSoek.
      tags:
        - LagretSoek
      operationId: GetLagretSoek
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: lagretSoekId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSoek
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSoek"
    put:
      description: Update a single LagretSoek.
      tags:
        - LagretSoek
      operationId: PutLagretSoek
      parameters:
        - name: lagretSoekId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSoek
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LagretSoek"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSoek"
    delete:
      description: Delete a single LagretSoek.
      tags:
        - LagretSoek
      operationId: DeleteLagretSoek
      parameters:
        - name: lagretSoekId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: LagretSoek
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSoek"

  /moetedeltaker:
    get:
      description: Get a Moetedeltaker list.
      tags:
        - Moetedeltaker
      operationId: GetMoetedeltakerList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetedeltaker"

  /moetedeltaker/{moetedeltakerId}:
    get:
      description: Get a single Moetedeltaker.
      tags:
        - Moetedeltaker
      operationId: GetMoetedeltaker
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: moetedeltakerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedeltaker
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedeltaker"
    put:
      description: Update a single Moetedeltaker.
      tags:
        - Moetedeltaker
      operationId: PutMoetedeltaker
      parameters:
        - name: moetedeltakerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedeltaker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetedeltaker"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedeltaker"
    delete:
      description: Delete a single Moetedeltaker.
      tags:
        - Moetedeltaker
      operationId: DeleteMoetedeltaker
      parameters:
        - name: moetedeltakerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedeltaker
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedeltaker"

  /moetedokument:
    get:
      description: Get a Moetedokument list.
      tags:
        - Moetedokument
      operationId: GetMoetedokumentList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetedokument"

  /moetedokument/{moetedokumentId}:
    get:
      description: Get a single Moetedokument.
      tags:
        - Moetedokument
      operationId: GetMoetedokument
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: moetedokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedokument
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedokument"
    put:
      description: Update a single Moetedokument.
      tags:
        - Moetedokument
      operationId: PutMoetedokument
      parameters:
        - name: moetedokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedokument
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetedokument"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedokument"
    delete:
      description: Delete a single Moetedokument.
      tags:
        - Moetedokument
      operationId: DeleteMoetedokument
      parameters:
        - name: moetedokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedokument
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedokument"

  /moetedokument/{moetedokumentId}/dokumentbeskrivelse:
    get:
      description: Get a Dokumentbeskrivelse list.
      tags:
        - Dokumentbeskrivelse
      operationId: GetMoetedokumentDokumentbeskrivelseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: moetedokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedokument
        - name: moetedokumentId
          in: query
          description: Filter by Moetedokument
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"
    post:
      description: Create a Dokumentbeskrivelse, or relate to an existing one.
      tags:
        - Dokumentbeskrivelse
      operationId: PostMoetedokumentDokumentbeskrivelse
      parameters:
        - name: moetedokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetedokument
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /moetesak:
    get:
      description: Get a Moetesak list.
      tags:
        - Moetesak
      operationId: GetMoetesakList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetesak"
    post:
      description: Create a Moetesak.
      tags:
        - Moetesak
      operationId: PostMoetesak
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetesak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesak"

  /moetesak/{moetesakId}:
    get:
      description: Get a single Moetesak.
      tags:
        - Moetesak
      operationId: GetMoetesak
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: moetesakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesak"
    put:
      description: Update a single Moetesak.
      tags:
        - Moetesak
      operationId: PutMoetesak
      parameters:
        - name: moetesakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesak
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetesak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesak"
    delete:
      description: Delete a single Moetesak.
      tags:
        - Moetesak
      operationId: DeleteMoetesak
      parameters:
        - name: moetesakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesak"

  /moetesak/{moetesakId}/dokumentbeskrivelse:
    get:
      description: Get a Dokumentbeskrivelse list.
      tags:
        - Dokumentbeskrivelse
      operationId: GetMoetesakDokumentbeskrivelseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: moetesakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesak
        - name: moetesakId
          in: query
          description: Filter by Moetesak
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"
    post:
      description: Create a Dokumentbeskrivelse.
      tags:
        - Dokumentbeskrivelse
      operationId: PostMoetesakDokumentbeskrivelse
      parameters:
        - name: moetesakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesak
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /moetesaksbeskrivelse:
    get:
      description: Get a Moetesaksbeskrivelse list.
      tags:
        - Moetesaksbeskrivelse
      operationId: GetMoetesaksbeskrivelseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetesaksbeskrivelse"

  /moetesaksbeskrivelse/{moetesaksbeskrivelseId}:
    get:
      description: Get a single Moetesaksbeskrivelse.
      tags:
        - Moetesaksbeskrivelse
      operationId: GetMoetesaksbeskrivelse
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: moetesaksbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesaksbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesaksbeskrivelse"
    put:
      description: Update a single Moetesaksbeskrivelse.
      tags:
        - Moetesaksbeskrivelse
      operationId: PutMoetesaksbeskrivelse
      parameters:
        - name: moetesaksbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesaksbeskrivelse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetesaksbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesaksbeskrivelse"
    delete:
      description: Delete a single Moetesaksbeskrivelse.
      tags:
        - Moetesaksbeskrivelse
      operationId: DeleteMoetesaksbeskrivelse
      parameters:
        - name: moetesaksbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetesaksbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesaksbeskrivelse"

  /skjerming:
    get:
      description: Get a Skjerming list.
      tags:
        - Skjerming
      operationId: GetSkjermingList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Skjerming"
    post:
      description: Create a Skjerming.
      tags:
        - Skjerming
      operationId: PostSkjerming
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Skjerming"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skjerming"

  /skjerming/{skjermingId}:
    get:
      description: Get a single Skjerming.
      tags:
        - Skjerming
      operationId: GetSkjerming
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: skjermingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Skjerming
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skjerming"
    put:
      description: Update a single Skjerming.
      tags:
        - Skjerming
      operationId: PutSkjerming
      parameters:
        - name: skjermingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Skjerming
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Skjerming"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skjerming"
    delete:
      description: Delete a single Skjerming.
      tags:
        - Skjerming
      operationId: DeleteSkjerming
      parameters:
        - name: skjermingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Skjerming
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skjerming"

  /utredning:
    get:
      description: Get a Utredning list.
      tags:
        - Utredning
      operationId: GetUtredningList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Utredning"

  /utredning/{utredningId}:
    get:
      description: Get a single Utredning.
      tags:
        - Utredning
      operationId: GetUtredning
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utredning"
    put:
      description: Update a single Utredning.
      tags:
        - Utredning
      operationId: PutUtredning
      parameters:
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Utredning"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utredning"
    delete:
      description: Delete a single Utredning.
      tags:
        - Utredning
      operationId: DeleteUtredning
      parameters:
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Utredning"

  /utredning/{utredningId}/utredningsdokument:
    get:
      description: Get a Utredningsdokument list.
      tags:
        - Utredning
      operationId: GetUtredningUtredningsdokumentList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
        - name: utredningId
          in: query
          description: Filter by Utredning
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"
    post:
      description: Create a Utredningsdokument.
      tags:
        - Utredning
      operationId: PostUtredningUtredningsdokument
      parameters:
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /utredning/{utredningId}/utredningsdokument/{utredningsdokumentId}:
    delete:
      description: Delete a single Utredningsdokument.
      tags:
        - Utredning
      operationId: DeleteUtredningUtredningsdokument
      parameters:
        - name: utredningId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Utredning
        - name: utredningsdokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /vedtak:
    get:
      description: Get a Vedtak list.
      tags:
        - Vedtak
      operationId: GetVedtakList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Vedtak"

  /vedtak/{vedtakId}:
    get:
      description: Get a single Vedtak.
      tags:
        - Vedtak
      operationId: GetVedtak
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vedtak"
    put:
      description: Update a single Vedtak.
      tags:
        - Vedtak
      operationId: PutVedtak
      parameters:
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vedtak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vedtak"
    delete:
      description: Delete a single Vedtak.
      tags:
        - Vedtak
      operationId: DeleteVedtak
      parameters:
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vedtak"

  /vedtak/{vedtakId}/vedtaksdokument:
    get:
      description: Get a Vedtaksdokument list.
      tags:
        - Vedtak
      operationId: GetVedtakVedtaksdokumentList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
        - name: vedtakId
          in: query
          description: Filter by Vedtak
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"
    post:
      description: Create a Vedtaksdokument.
      tags:
        - Vedtak
      operationId: PostVedtakVedtaksdokument
      parameters:
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /vedtak/{vedtakId}/vedtaksdokument/{vedtaksdokumentId}:
    delete:
      description: Delete a single Vedtaksdokument.
      tags:
        - Vedtak
      operationId: DeleteVedtakVedtaksdokument
      parameters:
        - name: vedtakId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Vedtak
        - name: vedtaksdokumentId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /votering:
    get:
      description: Get a Votering list.
      tags:
        - Votering
      operationId: GetVoteringList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Votering"

  /votering/{voteringId}:
    get:
      description: Get a single Votering.
      tags:
        - Votering
      operationId: GetVotering
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: voteringId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Votering
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Votering"
    put:
      description: Update a single Votering.
      tags:
        - Votering
      operationId: PutVotering
      parameters:
        - name: voteringId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Votering
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Votering"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Votering"
    delete:
      description: Delete a single Votering.
      tags:
        - Votering
      operationId: DeleteVotering
      parameters:
        - name: voteringId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Votering
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Votering"

  /enhet:
    get:
      description: Get a Enhet list.
      tags:
        - Enhet
      operationId: GetEnhetList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
        - name: parentId
          in: query
          description: Filter by parent
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Enhet"

  /enhet/{enhetId}:
    get:
      description: Get a single Enhet.
      tags:
        - Enhet
      operationId: GetEnhet
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enhet"
    put:
      description: Update a single Enhet.
      tags:
        - Enhet
      operationId: PutEnhet
      parameters:
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Enhet"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enhet"
    delete:
      description: Delete a single Enhet.
      tags:
        - Enhet
      operationId: DeleteEnhet
      parameters:
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enhet"

  /enhet/{enhetId}/underenhet:
    get:
      description: Get all underenhet for a Enhet.
      tags:
        - Enhet
      operationId: GetEnhetUnderenhetList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Enhet"

    post:
      description: Add a subEnhet to a Enhet.
      tags:
        - Enhet
      operationId: PostEnhetUnderenhet
      parameters:
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Enhet"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enhet"

  /enhet/{enhetId}/apiKey:
    get:
      description: Get a list of ApiKey for a Enhet.
      tags:
        - Enhet
      operationId: GetEnhetApiKeyList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
        - name: enhetId
          in: query
          description: Filter by Enhet
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ApiKey"
    post:
      description: Add a new ApiKey to a Enhet.
      tags:
        - Enhet
      operationId: PostEnhetApiKey
      parameters:
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKey"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"

  /enhet/{enhetId}/arkiv:
    get:
      description: Get a list of Arkiv for a Enhet.
      tags:
        - Enhet
      operationId: GetEnhetArkivList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
        - name: enhetId
          in: query
          description: Filter by Enhet
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arkiv"

  /enhet/{enhetId}/innsynskravDel:
    get:
      description: Get a list of InnsynskravDel for a Enhet.
      tags:
        - Enhet
      operationId: GetEnhetInnsynskravDelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: enhetId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Enhet
        - name: enhetId
          in: query
          description: Filter by Enhet
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/InnsynskravDel"

  /journalpost:
    get:
      description: Get a Journalpost list.
      tags:
        - Journalpost
      operationId: GetJournalpostList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Journalpost"

  /journalpost/{journalpostId}:
    get:
      description: Get a single record.
      tags:
        - Journalpost
      operationId: GetJournalpost
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journalpost"
    put:
      description: Update a record
      tags:
        - Journalpost
      operationId: PutJournalpost
      parameters:
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Journalpost"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journalpost"
    delete:
      description: Delete a record.
      tags:
        - Journalpost
      operationId: DeleteJournalpost
      parameters:
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journalpost"

  /journalpost/{journalpostId}/korrespondansepart:
    get:
      description: Get a list of Korrespondansepart for a Journalpost.
      tags:
        - Journalpost
      operationId: GetJournalpostKorrespondansepartList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
        - name: journalpostId
          in: query
          description: Filter by Journalpost
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Korrespondansepart"
    post:
      description: Add a new Korrespondansepart to a Journalpost.
      tags:
        - Journalpost
      operationId: PostJournalpostKorrespondansepart
      parameters:
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Korrespondansepart"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Korrespondansepart"

  /journalpost/{journalpostId}/dokumentbeskrivelse:
    get:
      description: Get a list of Dokumentbeskrivelse for a Journalpost.
      tags:
        - Journalpost
      operationId: GetJournalpostDokumentbeskrivelseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
        - name: journalpostId
          in: query
          description: Filter by Journalpost id.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"
    post:
      description: Add a new Dokumentbeskrivelse to a Journalpost.
      tags:
        - Journalpost
      operationId: PostJournalpostDokumentbeskrivelse
      parameters:
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /journalpost/{journalpostId}/dokumentbeskrivelse/{dokumentbeskrivelseId}:
    delete:
      description: Delete a Dokumentbeskrivelse from a Journalpost.
      tags:
        - Journalpost
      operationId: DeleteJournalpostDokumentbeskrivelse
      parameters:
        - name: journalpostId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Journalpost
        - name: dokumentbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journalpost"

  /dokumentbeskrivelse:
    get:
      description: Get a Dokumentbeskrivelse list.
      tags:
        - Dokumentbeskrivelse
      operationId: GetDokumentbeskrivelseList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Dokumentbeskrivelse"

  /dokumentbeskrivelse/{dokumentbeskrivelseId}:
    get:
      description: Get a single record.
      tags:
        - Dokumentbeskrivelse
      operationId: GetDokumentbeskrivelse
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: dokumentbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"
    put:
      description: Update a document
      tags:
        - Dokumentbeskrivelse
      operationId: PutDokumentbeskrivelse
      parameters:
        - name: dokumentbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dokumentbeskrivelse"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"
    delete:
      description: Delete a document.
      tags:
        - Dokumentbeskrivelse
      operationId: DeleteDokumentbeskrivelse
      parameters:
        - name: dokumentbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dokumentbeskrivelse"

  /dokumentbeskrivelse/{dokumentbeskrivelseId}/download/{subId}.{docExtension}:
    get:
      description: Download the binary file.
      tags:
        - Dokumentbeskrivelse
      operationId: DownloadDokumentbeskrivelse
      parameters:
        - name: dokumentbeskrivelseId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentbeskrivelse
        - name: subId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Dokumentobjekt
        - in: path
          name: docExtension
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /saksmappe:
    get:
      description: Get a Saksmappe list.
      tags:
        - Saksmappe
      operationId: GetSaksmappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Saksmappe"

  /saksmappe/{saksmappeId}:
    get:
      description: Get a Saksmappe.
      tags:
        - Saksmappe
      operationId: GetSaksmappe
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: saksmappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Saksmappe
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"
    put:
      description: Update a Saksmappe.
      tags:
        - Saksmappe
      operationId: PutSaksmappe
      parameters:
        - name: saksmappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Saksmappe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Saksmappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"
    delete:
      description: Delete a Saksmappe.
      tags:
        - Saksmappe
      operationId: DeleteSaksmappe
      parameters:
        - name: saksmappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Saksmappe
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Saksmappe"

  /saksmappe/{saksmappeId}/journalpost:
    get:
      description: Get Journalpost list for a Saksmappe.
      tags:
        - Saksmappe
      operationId: GetSaksmappeJournalpostList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: saksmappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Saksmappe
        - name: saksmappeId
          in: query
          description: Filter by SaksmappeId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Journalpost"

    post:
      description: Add a Journalpost to a Saksmappe.
      tags:
        - Saksmappe
      operationId: PostSaksmappeJournalpost
      parameters:
        - name: saksmappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Saksmappe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Journalpost"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journalpost"

  /moetemappe:
    get:
      description: Get a Moetemappe list.
      tags:
        - Moetemappe
      operationId: GetMoetemappeList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetemappe"

  /moetemappe/{moetemappeId}:
    get:
      description: Get a Moetemappe.
      tags:
        - Moetemappe
      operationId: GetMoetemappe
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"
    put:
      description: Update a Moetemappe.
      tags:
        - Moetemappe
      operationId: PutMoetemappe
      parameters:
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetemappe"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"
    delete:
      description: Delete a Moetemappe.
      tags:
        - Moetemappe
      operationId: DeleteMoetemappe
      parameters:
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetemappe"

  /moetemappe/{moetemappeId}/moetedokument:
    get:
      description: Get a Moetedokument list.
      tags:
        - Moetemappe
      operationId: GetMoetemappeMoetedokumentList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
        - name: moetemappeId
          in: query
          description: Filter by MoetemappeId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetedokument"
    post:
      description: Add a document to a meeting.
      tags:
        - Moetemappe
      operationId: PostMoetemappeMoetedokument
      parameters:
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetedokument"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetedokument"

  /moetemappe/{moetemappeId}/moetesak:
    get:
      description: Get a Moetesak list for a Moetemappe.
      tags:
        - Moetemappe
      operationId: GetMoetemappeMoetesakList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
        - name: moetemappeId
          in: query
          description: Filter by MoetemappeId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Moetesak"
    post:
      description: Add a Moetesak to a Moetemappe.
      tags:
        - Moetemappe
      operationId: PostMoetemappeMoetesak
      parameters:
        - name: moetemappeId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Moetemappe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moetesak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moetesak"

  /bruker:
    get:
      description: Get a Bruker list.
      tags:
        - Bruker
      operationId: GetBrukerList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Bruker"
    post:
      description: Add a new Bruker.
      tags:
        - Bruker
      operationId: PostBruker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bruker"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /bruker/{brukerId}:
    get:
      description: Get a single Bruker.
      tags:
        - Bruker
      operationId: GetBruker
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"
    put:
      description: Update a single Bruker.
      tags:
        - Bruker
      operationId: PutBruker
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bruker"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"
    delete:
      description: Delete a single Bruker.
      tags:
        - Bruker
      operationId: DeleteBruker
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /bruker/{brukerId}/innsynskrav:
    get:
      description: Get all innsynskrav for a Bruker.
      tags:
        - Bruker
      operationId: GetBrukerInnsynskravList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - name: brukerId
          in: query
          description: Filter by brukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Innsynskrav"

  /bruker/{brukerId}/innsynskravDel:
    get:
      description: Get all innsynskravDel for a Bruker.
      tags:
        - Bruker
      operationId: GetBrukerInnsynskravDelList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - name: brukerId
          in: query
          description: Filter by brukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/InnsynskravDel"

  /bruker/{brukerId}/lagretSoek:
    get:
      description: Get LagretSoek list for a Bruker.
      tags:
        - Bruker
      operationId: GetBrukerLagretSoekList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - name: brukerId
          in: query
          description: Filter by brukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LagretSoek"

    post:
      description: Add a saved search to a Bruker.
      tags:
        - Bruker
      operationId: PostBrukerLagretSoek
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LagretSoek"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSoek"

  /bruker/{brukerId}/lagretSak:
    get:
      description: Get LagretSak list for a Bruker.
      tags:
        - Bruker
      operationId: GetBrukerLagretSakList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - name: brukerId
          in: query
          description: Filter by brukerId
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LagretSak"

    post:
      description: Add a saved case to a Bruker.
      tags:
        - Bruker
      operationId: PostBrukerLagretSak
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LagretSak"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LagretSak"

  /bruker/{brukerId}/activate/{secret}:
    put:
      description: Activate a Bruker.
      tags:
        - Bruker
      operationId: Activate
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - name: secret
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /bruker/{brukerId}/updatePassword:
    put:
      description: Update password for a Bruker.
      tags:
        - Bruker
      operationId: PutBrukerPassword
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /bruker/{brukerId}/updatePassword/{secret}:
    put:
      description: Update password for a Bruker.
      tags:
        - Bruker
      operationId: PutBrukerPasswordWithSecret
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
        - in: path
          name: secret
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password

      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /bruker/{brukerId}/requestPasswordReset:
    put:
      description: Request password reset for a Bruker.
      tags:
        - Bruker
      operationId: RequestPasswordReset
      parameters:
        - name: brukerId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Bruker
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bruker"

  /tilbakemelding:
    get:
      description: Get a Tilbakemelding list.
      tags:
        - Tilbakemelding
      operationId: GetTilbakemeldingList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tilbakemelding"
    post:
      description: Add a new Tilbakemelding.
      tags:
        - Tilbakemelding
      operationId: PostTilbakemelding
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tilbakemelding"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tilbakemelding"

  /tilbakemelding/{tilbakemeldingId}:
    get:
      description: Get a single Tilbakemelding.
      tags:
        - Tilbakemelding
      operationId: GetTilbakemelding
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: tilbakemeldingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Tilbakemelding
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tilbakemelding"
    put:
      description: Update a single Tilbakemelding.
      tags:
        - Tilbakemelding
      operationId: PutTilbakemelding
      parameters:
        - name: tilbakemeldingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Tilbakemelding
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tilbakemelding"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tilbakemelding"
    delete:
      description: Delete a single Tilbakemelding.
      tags:
        - Tilbakemelding
      operationId: DeleteTilbakemelding
      parameters:
        - name: tilbakemeldingId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: Tilbakemelding
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tilbakemelding"

  /search:
    get:
      description: Search Journalpost, Moetemappe, Moetesak, Saksmappe
      operationId: Search
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - name: sortBy
          in: query
          description: >-
            The field to sort the result set by. The default is `created`.
          required: false
          schema:
            type: string
            enum:
              [
                "created",
                "updated",
                "offentligTittel",
                "offentligTittelSensitiv",
              ]
        - name: query
          in: query
          description: >-
            A query string used to filter the result set.
          required: false
          schema:
            type: string
        - name: resource
          in: query
          description: >-
            Filter the source by resource type.
          required: false
          schema:
            type: string
            enum: ["Journalpost", "Moetemappe", "Moetesak", "Saksmappe"]
        - name: administrativEnhetId
          in: query
          description: >-
            Filter the source by administrativEnhetId.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: administrativEnhetTransitiveId
          in: query
          description: >-
            Filter the source by administrativeEnhet, including parent units.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: administrativEnhetIri
          in: query
          description: >-
            Filter the source by administrativEnhetIri.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: administrativEnhetTransitiveIri
          in: query
          description: >-
            Filter the source by administrativeEnhet, including parent units.
          required: false
          schema:
            type: array
            items:
              type: string

      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          anyOf:
                            - $ref: "#/components/schemas/Journalpost"
                            - $ref: "#/components/schemas/Moetemappe"
                            - $ref: "#/components/schemas/Moetesak"
                            - $ref: "#/components/schemas/Saksmappe"

  /apiKey:
    get:
      description: Get a ApiKey list.
      tags:
        - ApiKey
      operationId: GetApiKeyList
      parameters:
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/StartingAfter"
        - $ref: "#/components/parameters/EndingBefore"
        - $ref: "#/components/parameters/IDs"
        - $ref: "#/components/parameters/ExternalIDs"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResultList"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ApiKey"

  /apiKey/{apiKeyId}:
    get:
      description: Get a single ApiKey.
      tags:
        - ApiKey
      operationId: GetApiKey
      parameters:
        - $ref: "#/components/parameters/Expand"
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: ApiKey
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
    put:
      description: Update a single ApiKey.
      tags:
        - ApiKey
      operationId: PutApiKey
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: ApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKey"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"
    delete:
      description: Delete a single ApiKey.
      tags:
        - ApiKey
      operationId: DeleteApiKey
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
          x-resourceId: ApiKey
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKey"

security:
  - ApiKey: []

components:
  schemas:
    Base:
      type: object
      x-resourceId: Base
      properties:
        id:
          type: string
          readOnly: true
          description: >-
            The unique identifier for the resource. This is is assigned by the
            system when the resource is created.
        created:
          type: string
          format: date-time
          readOnly: true
          description: >-
            A timestamp of when the resource was created. This field is updated
            automatically.
        updated:
          type: string
          format: date-time
          readOnly: true
          description: >-
            A timestamp of when the resource was last updated. This field is
            updated automatically.
        deleted:
          type: boolean
          readOnly: true
          description: >-
            This field is only present if the resource has been deleted. If
            present, it will always be `true`.
        externalId:
          type: string
          description: >-
            An external ID for the resource. This is similar to "systemId", but
            will be used for legacy IRIs that were used in earlier eInnsyn versions.
      required:
        - id
        - created
        - updated
        - entity

    ArkivBase:
      type: object
      x-resourceId: ArkivBase
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            systemId:
              type: string
              description: >-
                The unique identifier for the resource, given by the user's system.
            journalenhet:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
              description: >-
                The administrative unit that is responsible for the resource. This
                is by default derived from the credentials used to authenticate the
                request on creation, or it can manually be set to an Enhet owned by
                that derived Enhet.
          x-expandableFields:
            - journalenhet

    Arkiv:
      type: object
      x-resourceId: Arkiv
      x-idPrefix: "ark"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Arkiv"]
              readOnly: true
            tittel:
              type: string
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Arkiv"
          required:
            - tittel
          x-expandableFields:
            - parent

    Arkivdel:
      type: object
      x-resourceId: Arkivdel
      x-idPrefix: "arkd"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Arkivdel"]
              readOnly: true
            tittel:
              type: string
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Arkiv"
          required:
            - tittel
          x-expandableFields:
            - parent

    Klasse:
      type: object
      x-resourceId: Klasse
      x-idPrefix: "kla"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Klasse"]
              readOnly: true
            tittel:
              type: string
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Arkivdel"
                - $ref: "#/components/schemas/Klasse"
                - $ref: "#/components/schemas/Klassifikasjonssystem"
          required:
            - tittel
          x-expandableFields:
            - parent

    Klassifikasjonssystem:
      type: object
      x-resourceId: Klassifikasjonssystem
      x-idPrefix: "ksys"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Klassifikasjonssystem"]
              readOnly: true
            tittel:
              type: string
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Arkivdel"
          required:
            - tittel
          x-expandableFields:
            - parent

    Registrering:
      type: object
      x-resourceId: Registrering
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            offentligTittel:
              type: string
            offentligTittelSensitiv:
              type: string
            beskrivelse:
              type: string
            publisertDato:
              type: string
              format: date-time
              description: >-
                The date the resource was published. This field is updated
                automatically, but can be set manually by admins.
            oppdatertDato:
              type: string
              format: date-time
              description: >-
                The date the resource was last updated. This field is updated
                automatically, but can be set manually by admins.
            korrespondansepart:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Korrespondansepart"
            dokumentbeskrivelse:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Dokumentbeskrivelse"
          required:
            - offentligTittel
            - offentligTittelSensitiv
          x-expandableFields:
            - korrespondansepart
            - dokumentbeskrivelse

    Journalpost:
      type: object
      x-resourceId: Journalpost
      x-idPrefix: "jp"
      allOf:
        - $ref: "#/components/schemas/Registrering"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Journalpost"]
              readOnly: true
            journalaar:
              type: integer
            journalsekvensnummer:
              type: integer
            journalpostnummer:
              type: integer
            journalposttype:
              type: string
              enum:
                [
                  "inngaaende_dokument",
                  "utgaaende_dokument",
                  "organinternt_dokument_uten_oppfoelging",
                  "organinternt_dokument_for_oppfoelging",
                  "saksframlegg",
                  "sakskart",
                  "moeteprotokoll",
                  "moetebok",
                  "ukjent",
                ]
            legacyJournalposttype:
              type: string
            journaldato:
              type: string
              format: date
            dokumentetsDato:
              type: string
              format: date
            administrativEnhet:
              type: string
              readOnly: true
            administrativEnhetObjekt:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
              readOnly: true
            saksmappe:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Saksmappe"
            skjerming:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Skjerming"
          required:
            - journalaar
            - journalsekvensnummer
            - journalpostnummer
            - journalposttype
            - journaldato
          x-expandableFields:
            - saksmappe
            - skjerming

    Mappe:
      type: object
      x-resourceId: Mappe
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            offentligTittel:
              type: string
            offentligTittelSensitiv:
              type: string
            beskrivelse:
              type: string
            noekkelord:
              type: string
            publisertDato:
              type: string
              format: date
              description: >-
                The date the resource was published. This field is updated
                automatically, but can be set manually by admins.
            oppdatertDato:
              type: string
              format: date
              description: >-
                The date the resource was last updated. This field is updated
                automatically, but can be set manually by admins.
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Saksmappe"
                - $ref: "#/components/schemas/Moetemappe"
                - $ref: "#/components/schemas/Arkiv"
                - $ref: "#/components/schemas/Arkivdel"
                - $ref: "#/components/schemas/Klasse"
          required:
            - offentligTittel
            - offentligTittelSensitiv
          x-expandableFields:
            - parent

    Saksmappe:
      type: object
      x-resourceId: Saksmappe
      x-idPrefix: "sm"
      allOf:
        - $ref: "#/components/schemas/Mappe"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Saksmappe"]
              readOnly: true
            saksaar:
              type: integer
            sakssekvensnummer:
              type: integer
            saksnummer:
              type: string
              readOnly: true
            saksdato:
              type: string
              format: date
            journalpost:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Journalpost"
            administrativEnhet:
              type: string
            administrativEnhetObjekt:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
          required:
            - saksaar
            - sakssekvensnummer
          x-expandableFields:
            - journalpost
            - administrativEnhetObjekt

    Moetemappe:
      type: object
      x-resourceId: Moetemappe
      x-idPrefix: "mm"
      allOf:
        - $ref: "#/components/schemas/Mappe"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Moetemappe"]
              readOnly: true
            moetenummer:
              type: string
            utvalg:
              type: string
            utvalgObjekt:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
            moetedato:
              type: string
              format: date-time
            moetested:
              type: string
            videoLink:
              type: string
              maxLength: 5000
            referanseForrigeMoete:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetemappe"
            referanseNesteMoete:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetemappe"
            moetedokument:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Moetedokument"
            moetesak:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Moetesak"
          required:
            - moetenummer
            - utvalg
            - moetedato
          x-expandableFields:
            - utvalgObjekt
            - referanseForrigeMoete
            - referanseNesteMoete
            - moetedokument
            - moetesak

    Moetesak:
      type: object
      x-resourceId: Moetesak
      x-idPrefix: "ms"
      allOf:
        - $ref: "#/components/schemas/Registrering"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Moetesak"]
              readOnly: true
            moetesakstype:
              type: string
              enum:
                [
                  "moete",
                  "politisk",
                  "delegert",
                  "interpellasjon",
                  "godkjenning",
                  "orientering",
                  "referat",
                  "annet",
                ]
            legacyMoetesakstype:
              type: string
            moetesaksaar:
              type: integer
            moetesakssekvensnummer:
              type: integer
            utvalg:
              type: string
            utvalgObjekt:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
            videoLink:
              type: string
            utredning:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Utredning"
            innstilling:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetesaksbeskrivelse"
            vedtak:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Vedtak"
            moetemappe:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetemappe"
          required:
            - moetesakstype
            - moetesakssekvensnummer
          x-expandableFields:
            - administrativEnhetObjekt
            - utredning
            - innstilling
            - vedtak
            - moetemappe

    Utredning:
      type: object
      x-resourceId: Utredning
      x-idPrefix: "utr"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Utredning"]
              readOnly: true
            saksbeskrivelse:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetesaksbeskrivelse"
            innstilling:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetesaksbeskrivelse"
            utredningsdokument:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Dokumentbeskrivelse"
          required:
            - saksbeskrivelse
            - innstilling
          x-expandableFields:
            - saksbeskrivelse
            - innstilling
            - utredningsdokument

    Vedtak:
      type: object
      x-resourceId: Vedtak
      x-idPrefix: "ved"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Vedtak"]
              readOnly: true
            vedtakstekst:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetesaksbeskrivelse"
            votering:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Votering"
            behandlingsprotokoll:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Behandlingsprotokoll"
            vedtaksdokument:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Dokumentbeskrivelse"
            dato:
              type: string
              format: date
          required:
            - vedtakstekst
            - dato
          x-expandableFields:
            - vedtakstekst
            - votering
            - behandlingsprotokoll
            - vedtaksdokument

    Votering:
      type: object
      x-resourceId: Votering
      x-idPrefix: "vot"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Votering"]
              readOnly: true
            moetedeltaker:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetedeltaker"
            stemme:
              type: string
              enum:
                - Ja
                - Nei
                - Blankt
            representerer:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Identifikator"
          required:
            - moetedeltaker
            - stemme
          x-expandableFields:
            - moetedeltaker
            - representerer

    Moetesaksbeskrivelse:
      type: object
      x-resourceId: Moetesaksbeskrivelse
      x-idPrefix: "msb"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Moetesaksbeskrivelse"]
              readOnly: true
            tekstInnhold:
              type: string
            tekstFormat:
              type: string
          required:
            - tekstInnhold
            - tekstFormat

    Behandlingsprotokoll:
      type: object
      x-resourceId: Behandlingsprotokoll
      x-idPrefix: "bp"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Behandlingsprotokoll"]
              readOnly: true
            tekstInnhold:
              type: string
            tekstFormat:
              type: string
          required:
            - tekstInnhold
            - tekstFormat
            - test

    Moetedeltaker:
      type: object
      x-resourceId: Moetedeltaker
      x-idPrefix: "md"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Moetedeltaker"]
              readOnly: true
            moetedeltakerNavn:
              type: string
            moetedeltakerFunksjon:
              type: string
          required:
            - moetedeltakerNavn

    Korrespondansepart:
      type: object
      x-resourceId: Korrespondansepart
      x-idPrefix: "kp"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - type: object
          properties:
            entity:
              type: string
              enum: ["Korrespondansepart"]
              readOnly: true
            korrespondansepartNavn:
              type: string
            korrespondansepartNavnSensitiv:
              type: string
            korrespondanseparttype:
              type: string
            saksbehandler:
              type: string
            epostadresse:
              type: string
            postnummer:
              type: string
            erBehandlingsansvarlig:
              type: boolean
            administrativEnhet:
              type: string
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Journalpost"
                - $ref: "#/components/schemas/Moetedokument"
                - $ref: "#/components/schemas/Moetesak"
          required:
            - korrespondansepartNavn
            - korrespondansepartNavnSensitiv
            - korrespondanseparttype
          x-expandableFields:
            - journalpost

    Skjerming:
      type: object
      x-resourceId: Skjerming
      x-idPrefix: "skj"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Skjerming"]
              readOnly: true
            skjermingshjemmel:
              type: string
            tilgangsrestriksjon:
              type: string
          required:
            - tilgangsrestriksjon

    Identifikator:
      type: object
      x-resourceId: Identifikator
      x-idPrefix: "ide"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Identifikator"]
              readOnly: true
            navn:
              type: string
            identifikator:
              type: string
            initialer:
              type: string
            epostadresse:
              type: string

    Bruker:
      type: object
      x-resourceId: Bruker
      x-idPrefix: "bru"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["Bruker"]
              readOnly: true
            email:
              type: string
              format: email
            password:
              type: string
              format: password
            active:
              type: boolean
              default: false
              readOnly: true
            language:
              type: string
              default: nb
              enum:
                - nb
                - nn
                - en
                - se
          required:
            - email
            - password
          x-expandableFields:
            - lagretSak
            - lagretSoek
            - innsynskrav
            - innsynskravDel

    Innsynskrav:
      type: object
      x-resourceId: Innsynskrav
      x-idPrefix: "ik"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["Innsynskrav"]
              readOnly: true
            email:
              type: string
              format: email
            innsynskravDel:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/InnsynskravDel"
            verified:
              type: boolean
              default: false
              readOnly: true
            bruker:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Bruker"
            language:
              type: string
              enum:
                - nb
                - nn
                - en
                - se
          required:
            - email
            - innsynskravDel
          x-expandableFields:
            - bruker
            - innsynskravDel

    InnsynskravDel:
      type: object
      x-resourceId: InnsynskravDel
      x-idPrefix: "ikd"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["InnsynskravDel"]
              readOnly: true
            innsynskrav:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Innsynskrav"
            journalpost:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Journalpost"
            enhet:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
              readOnly: true
            sent:
              type: string
              format: date-time
              readOnly: true
            retryCount:
              type: integer
              default: 0
              readOnly: true
            retryTimestamp:
              type: string
              format: date-time
              readOnly: true
          required:
            - journalpost
          x-expandableFields:
            - innsynskrav
            - journalpost

    Enhet:
      type: object
      x-resourceId: Enhet
      x-idPrefix: "enh"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["Enhet"]
              readOnly: true
            navn:
              type: string
            navnNynorsk:
              type: string
            navnEngelsk:
              type: string
            navnSami:
              type: string
            orgnummer:
              type: string
            enhetskode:
              type: string
            kontaktpunktAdresse:
              type: string
            kontaktpunktEpost:
              type: string
              format: email
            kontaktpunktTelefon:
              type: string
            innsynskravEpost:
              type: string
              format: email
            enhetstype:
              type: string
              enum:
                - ADMINISTRATIVENHET
                - AVDELING
                - BYDEL
                - DUMMYENHET
                - FYLKE
                - KOMMUNE
                - ORGAN
                - SEKSJON
                - UTVALG
                - VIRKSOMHET
            avsluttetDato:
              type: string
              format: date
            skjult:
              type: boolean
              default: false
            eFormidling:
              type: boolean
              default: false
            teknisk:
              type: boolean
              default: false
            skalKonvertereId:
              type: boolean
              default: false
            skalMottaKvittering:
              type: boolean
              default: false
            visToppnode:
              type: boolean
              default: false
            orderXmlVersjon:
              type: integer
            underenhet:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Enhet"
            handteresAv:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
            parent:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
          required:
            - navn
            - orgnummer
            - kontaktpunktEpost
            - innsynskravEpost
            - enhetstype
          x-expandableFields:
            - parent

    Dokumentbeskrivelse:
      type: object
      x-resourceId: Dokumentbeskrivelse
      x-idPrefix: "db"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Dokumentbeskrivelse"]
              readOnly: true
            tittel:
              type: string
            tittelSensitiv:
              type: string
            dokumentnummer:
              type: integer
            dokumenttype:
              type: string
            tilknyttetRegistreringSom:
              type: string
            dokumentobjekt:
              type: array
              items:
                anyOf:
                  - type: string
                  - $ref: "#/components/schemas/Dokumentobjekt"
          required:
            - tittel
            - tittelSensitiv
            - dokumentnummer
            - tilknyttetRegistreringSom
          x-expandableFields:
            - dokumentobjekt

    Dokumentobjekt:
      type: object
      x-resourceId: Dokumentobjekt
      x-idPrefix: "do"
      allOf:
        - $ref: "#/components/schemas/ArkivBase"
        - properties:
            entity:
              type: string
              enum: ["Dokumentobjekt"]
              readOnly: true
            referanseDokumentfil:
              type: string
              format: url
            format:
              type: string
            sjekksum:
              type: string
            sjekksumAlgoritme:
              type: string
            dokumentbeskrivelse:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Dokumentbeskrivelse"
              readOnly: true
          required:
            - referanseDokumentfil

    Moetedokument:
      type: object
      x-resourceId: Moetedokument
      x-idPrefix: "md"
      allOf:
        - $ref: "#/components/schemas/Registrering"
        - properties:
            entity:
              type: string
              enum: ["Moetedokument"]
              readOnly: true
            moetedokumenttype:
              type: string
            saksbehandler:
              type: string
            saksbehandlerSensitiv:
              type: string
            moetemappe:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Moetemappe"
              readOnly: true
          required:
            - moetedokumenttype

    LagretSoek:
      type: object
      x-resourceId: LagretSoek
      x-idPrefix: "lsoek"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["LagretSoek"]
              readOnly: true
            query:
              type: string
            bruker:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Bruker"
            varsling:
              type: boolean
              default: false

    LagretSak:
      type: object
      x-resourceId: LagretSak
      x-idPrefix: "lsak"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["LagretSak"]
              readOnly: true
            bruker:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Bruker"
            varsling:
              type: boolean
              default: false

    Tilbakemelding:
      type: object
      x-resourceId: Tilbakemelding
      x-idPrefix: "tbm"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["Tilbakemelding"]
              readOnly: true
            messageFromUser:
              type: string
            path:
              type: string
            referer:
              type: string
            userAgent:
              type: string
            screenHeight:
              type: integer
            screenWidth:
              type: integer
            docHeight:
              type: integer
            docWidth:
              type: integer
            winHeight:
              type: integer
            winWidth:
              type: integer
            scrollX:
              type: integer
            scrollY:
              type: integer
            userSatisfied:
              type: boolean
            handledByAdmin:
              type: boolean
            adminComment:
              type: string

    ApiKey:
      type: object
      x-resourceId: ApiKey
      x-idPrefix: "key"
      allOf:
        - $ref: "#/components/schemas/Base"
        - properties:
            entity:
              type: string
              enum: ["ApiKey"]
              readOnly: true
            name:
              type: string
              description: >-
                A name for the API key. This can be used to identify the key, in
                case you have multiple keys for multiple systems.
            secretKey:
              type: string
              description: >-
                The API key used to authenticate requests. This will only be shown
                once, and we will only store a hashed version.
              readOnly: true
            enhet:
              anyOf:
                - type: string
                - $ref: "#/components/schemas/Enhet"
              description: >-
                The Enhet that requests using this key will be associated with.
          x-expandableFields:
            - enhet

    ResultList:
      type: object
      x-resourceId: ResultList
      properties:
        next:
          type: string
          readOnly: true
        previous:
          type: string
          readOnly: true

    QueryParameters:
      type: object
      properties:
        expand:
          $ref: "#/components/parameters/Expand/schema"

    ListQueryParameters:
      type: object
      properties:
        expand:
          $ref: "#/components/parameters/Expand/schema"
        limit:
          $ref: "#/components/parameters/Limit/schema"
        sortOrder:
          $ref: "#/components/parameters/SortOrder/schema"
        startingAfter:
          $ref: "#/components/parameters/StartingAfter/schema"
        endingBefore:
          $ref: "#/components/parameters/EndingBefore/schema"
        ids:
          $ref: "#/components/parameters/IDs/schema"
        externalIds:
          $ref: "#/components/parameters/ExternalIDs/schema"

  parameters:
    Expand:
      description: >-
        Specifies which fields in the response should be expanded.
      explode: true
      in: query
      name: expand
      required: false
      schema:
        items:
          type: string
        type: array
        default: []
      style: deepObject

    Limit:
      description: >-
        A limit on the number of objects to be returned. Limit can range
        between 1 and 100, and the default is 10.
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 25

    SortOrder:
      description: >-
        The sort order of the result set. The default is ascending.
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
        enum: ["asc", "desc"]

    StartingAfter:
      description: >-
        A cursor for use in pagination. StartingAfter is a resource ID that
        defines your place in the list.
      in: query
      name: startingAfter
      schema:
        type: string

    EndingBefore:
      description: >-
        A cursor for use in pagination. EndingBefore is a resource ID that
        defines your place in the list.
      in: query
      name: endingBefore
      schema:
        type: string

    IDs:
      description: >-
        A list of resource IDs to be returned. If this parameter is used, the
        other parameters will be ignored.
      in: query
      name: ids
      schema:
        type: array
        items:
          type: string

    ExternalIDs:
      description: >-
        A list of external IDs to be returned. If this parameter is used, the
        other parameters will be ignored.
      in: query
      name: externalIds
      schema:
        type: array
        items:
          type: string
